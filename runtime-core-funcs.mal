; These mal functions are included automatically at the top of the program

(def! list (fn* [& args] args))

(def! vector (fn* [& args] (_concat_elementarrays 34 args [])))

(def! vec
  (fn* [a]
    (if (vector? a)
      a
      (_concat_elementarrays 34 a []))))

(def! hash-map (fn* [& args] (hash-map-from-list args)))

(def! assoc-list
  (fn* [result remain-args]
    (if (empty? remain-args)
      result
      (assoc-list (assoc1 result (nth remain-args 0) (nth remain-args 1)) (drop remain-args 2)))))

(def! assoc
  (fn* [hm & args]
    (assoc-list hm args)))

(def! dissoc-list
  (fn* [result remain-args]
    (if (empty? remain-args)
      result
      (dissoc-list (dissoc1 result (first remain-args)) (rest remain-args)))))

(def! dissoc
  (fn* [hm & args]
    (dissoc-list hm args)))

(def! concat
  (fn* [& args]
    (concat-helper (list) args)))

(def! conj
  (fn* [coll & args]
    (if (vector? coll)
      (conj-vector coll args)
      (conj-list coll args))))

(def! apply
  (fn* [f & args]
    (if (<= (count args) 1)
      (apply-helper f (first args))
      (apply-helper f (_concat_elementarrays 33 (_slice_elementarray 33 args 0 (- (count args) 1)) (last args))))))

(def! swap!
  (fn* [atm f & args]
    (reset! atm (apply-helper f (_concat_elementarrays 33 [@atm] args)))))

(def! pr-str  (fn* [& args] (_pr_str_sequence true "" " " "" args)))
(def! str     (fn* [& args] (_pr_str_sequence false "" "" "" args)))
(def! prn     (fn* [& args] (_printbytearray (_pr_str_sequence true "" " " "" args))))
(def! println (fn* [& args] (_printbytearray (_pr_str_sequence false "" " " "" args))))

(def! not (fn* [a] (if a false true)))
