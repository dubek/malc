(println ())
;; EXPECTED: ()
(println '())
;; EXPECTED: ()
(println '(11 22 33))
;; EXPECTED: (11 22 33)
(println (list 11 22 33))
;; EXPECTED: (11 22 33)
(println (list? '(11 22 33)))
;; EXPECTED: true

(println [])
;; EXPECTED: []
(println [11 22 33])
;; EXPECTED: [11 22 33]
(println (vector 11 22 33))
;; EXPECTED: [11 22 33]
(println (vector? [11 22 33]))
;; EXPECTED: true

(println (concat))
;; EXPECTED: ()
(println (concat (list 11 22)))
;; EXPECTED: (11 22)
(println (concat (list 11 22) [33 44] '(55 66)))
;; EXPECTED: (11 22 33 44 55 66)

(def! a '(11 22 33 44 55))
(println (count a))
;; EXPECTED: 5
(println (empty? a))
;; EXPECTED: false
(println (empty? '()))
;; EXPECTED: true
(println (first a))
;; EXPECTED: 11
(println (rest a))
;; EXPECTED: (22 33 44 55)
(println (rest '()))
;; EXPECTED: ()
(println (rest '(11)))
;; EXPECTED: ()

(def! b [11 22 33 44 55])
(println (count b))
;; EXPECTED: 5
(println (empty? b))
;; EXPECTED: false
(println (empty? []))
;; EXPECTED: true
(println (first b))
;; EXPECTED: 11
(println (rest b))
;; EXPECTED: (22 33 44 55)
(println (rest []))
;; EXPECTED: ()
(println (rest [11]))
;; EXPECTED: ()

(println (vec (list)))
;; EXPECTED: []
(println (vec (list 1)))
;; EXPECTED: [1]
(println (vec (list 1 2)))
;; EXPECTED: [1 2]
(println (vec []))
;; EXPECTED: []
(println (vec [1 2]))
;; EXPECTED: [1 2]

;; Testing that vec does not mutate the original list
(def! c (list 1 2))
(println (vec c))
;; EXPECTED: [1 2]
(println c)
;; EXPECTED: (1 2)
